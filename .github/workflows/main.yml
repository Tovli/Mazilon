name: "Build Bundle"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build_android:
    runs-on: ubuntu-latest
    env:
      KEYSTORE_PATH: android/app/
      KEYSTORE_FILE: Maztzilonkey.jks
      FIREBASE_OPTIONS_PATH: lib/util/Firebase/firebase_options.dart
      AAB_PATH: build/app/outputs/bundle/release/app-release.aab
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Export secrets as env vars
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}
      
      - name: Create .env file            
        uses: SpicyPizza/create-envfile@v2.0.3
        with:
            envkey_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
            file_name: .env
      - name: Write key store file for release signing
        run: |
          echo "$APPSIGNINGKEY" | base64 --decode > "${{ env.KEYSTORE_PATH }}${{ env.KEYSTORE_FILE }}"

      - name: Write firebase options file
        run: |
          echo "$FIREBASE_OPTIONS" | base64 --decode > "${{ env.FIREBASE_OPTIONS_PATH }}"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "17.x"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"
          cache: true
      - name: Install dependencies
        run: flutter pub get
      - name: Run tests
        run: flutter test --reporter=expanded

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION_LINE=$(grep '^version: ' pubspec.yaml)
          VERSION_STRING=${VERSION_LINE#version: }
          echo "VERSION_STRING=$VERSION_STRING" >> $GITHUB_ENV

      - name: Parse version components
        run: |
          VERSION_NO_BUILD="${VERSION_STRING%%+*}"
          echo "VERSION_NO_BUILD=$VERSION_NO_BUILD" >> $GITHUB_ENV

      - name: Get short commit hash
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

      - name: Set build name and number
        run: |
          BUILD_NAME="${VERSION_NO_BUILD}+${COMMIT_HASH}"
          BUILD_NUMBER="${GITHUB_RUN_NUMBER}"
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Build App Bundle
        run: |
          flutter build appbundle --release \
            --build-name="${BUILD_NAME}" \
            --build-number="${BUILD_NUMBER}"

      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.AAB_PATH }}

  build_ios:
    runs-on: macos-latest
    env:
      FIREBASE_OPTIONS_PATH: lib/util/Firebase/firebase_options.dart
      IOS_OUTPUT_PATH: build/ios/ipa
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Export secrets as env vars
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}
      - name: Create .env file            
        uses: SpicyPizza/create-envfile@v2.0.3
        with:
            envkey_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
            file_name: .env
      - name: Write firebase options file
        run: |
          echo "$FIREBASE_OPTIONS" | base64 --decode > "${{ env.FIREBASE_OPTIONS_PATH }}"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "17.x"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"
          cache: true

      - name: Install CocoaPods
        run: |
          brew install cocoapods
          cd ios
          if [ ! -f "Podfile" ]; then
            pod init
          fi
          pod install

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION_LINE=$(grep '^version: ' pubspec.yaml)
          VERSION_STRING=${VERSION_LINE#version: }
          echo "VERSION_STRING=$VERSION_STRING" >> $GITHUB_ENV

      - name: Parse version components
        run: |
          VERSION_NO_BUILD="${VERSION_STRING%%+*}"
          echo "VERSION_NO_BUILD=$VERSION_NO_BUILD" >> $GITHUB_ENV

      - name: Get short commit hash
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

      - name: Set build name and number
        run: |
          BUILD_NAME="${VERSION_NO_BUILD}+${COMMIT_HASH}"
          BUILD_NUMBER="${GITHUB_RUN_NUMBER}"
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Install dependencies
        run: flutter pub get
      
      - name: Install Fastlane
        run: sudo gem install fastlane

      - name: Set up Fastlane App Store Connect API Key
        env:
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > AuthKey.p8
          mkdir -p ~/.fastlane
          cat > ~/.fastlane/Appfile <<EOF
          app_identifier("com.clubhouse.mazilon")
          apple_id("dekel@tovli.co.il")
          team_id("${{ secrets.FASTLANE_TEAM_ID }}")
          itc_team_id("${{ secrets.FASTLANE_ITC_TEAM_ID }}")
          EOF
          cat > ~/.fastlane/api_key.json <<EOF
          {
            "key_id": "64S863835J",
            "issuer_id": "ed246534-6273-4684-972c-bd3857f2b661",
            "key": "$(cat AuthKey.p8 | awk '{printf "%s\\n", $0}')",
            "in_house": false
          }
          EOF

      - name: Run Fastlane Cert
        run: |
          fastlane cert --api_key_path ~/.fastlane/api_key.json

      - name: Run Fastlane Sigh
        run: |
          fastlane sigh --api_key_path ~/.fastlane/api_key.json --app_identifier com.clubhouse.mazilon --team_id ${{ secrets.FASTLANE_TEAM_ID }} --output_path . --filename provisioning_profile.mobileprovision


      - name: Build iOS IPA
        run: |
          flutter build ipa --release \
            --build-name="${BUILD_NAME}" \
            --build-number="${BUILD_NUMBER}" \
            --export-options-plist=ExportOptions.plist

      - name: Upload iOS IPA
        uses: actions/upload-artifact@v3
        with:
          name: ios-release
          path: ${{ env.IOS_OUTPUT_PATH }}
      - name: Deploy to TestFlight
        env:
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
        run: |
          fastlane pilot upload --api_key_path ~/.fastlane/api_key.json --ipa "${{ env.IOS_OUTPUT_PATH }}/Runner.ipa"